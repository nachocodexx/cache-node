node-id = "cache-0"
node-id =${?NODE_ID}
pool-id = "cache-pool-0"
pool-id = ${?POOL_ID}
key-store  = {
  nodes = [
    {
      node-id = "ch-0"
      host = "localhost",
      port=5600
    },
    {
      node-id = "ch-1"
      host = "localhost",
      port=5601
    },
    {
      node-id = "ch-2"
      host = "localhost",
      port=5602
    }
  ]
}
//
cache-policy = "LRU"
cache-policy = ${?CACHE_POLICY}
cache-size   = 1
cache-size   = ${?CACHE_SIZE}
cache-nodes = ["cache-0","cache-1","cache-2"]
cache-nodes = ${?CACHE_NODES}
//
sync-nodes = ["sync-0"]
sync-nodes = ${?SINK_NODES}
//
clouds = ["cloud-0"]
clouds = ${?CLOUDS}
//
level = 0
level = ${?LEVEL}
//
load-balancer = {
  zero = {
      exchange ="load-balancer-0",
      routing-key = "load-balancer-0.lb-0",
      ip ="localhost",
      port  = 3000
  }
  one = {
    exchange ="load-balancer-1",
    routing-key = "load-balancer-1.lb-1",
    ip ="localhost",
    port  = 3001
  }
  cloud = {
    exchange = ""
    routing-key =""
    ip = "localhost"
    port = 3002
  }
}
total-storage-space = 1000000000
total-storage-space = ${?TOTAL_STORAGE_SPACE}
//load-balancer = {
//
//  strategy= "active"
//}
//
//load-balancer.exchange = ${?LOAD_BALANCER_EXCHANGE}
//load-balancer.strategy = ${?LOAD_BALANCER_STRATEGY}
//load-balancer.routing-key = ${?LOAD_BALANCER_RK}



//replication-strategy = "active"
//replication-strategy = ${?REPLICATION_STRATEGY}
//Http
host = "0.0.0.0"
host = ${?NODE_HOST}
port = 4000
port = ${?NODE_PORT}
//
replication-factor = 2
replication-factor = ${?REPLICATION_FACTOR}
exchange-name = "default"
storage-path = "/home/nacho/Programming/Scala/cache-node/target/data"
//storage-path = "/test/data"
storage-path = ${?STORAGE_PATH}
//

//
rabbitmq {
  nodes = [
    {
      host: "localhost",
      port: 5672,
    },
  ]
  virtual-host = "/",
  connection-timeout = 3,
  ssl = false,
  username = "guest",
  password = "guest",
//  username = "nachox",
//  password = "$1$9IMYrTig$iUET1Vy6lDq2t7m1K4amL1",
  requeue-on-nack = false,
  requeue-on-reject = false,
  internal-queue-size = 500
}

rabbitmq.nodes = ${?RABBITMQ_NODES}
//rabbitmq.nodes = ${?RABBITMQ_NODES}
rabbitmq.virtual-host = ${?RABBITMQ_VIRTUAL_HOST}
rabbitmq.connection-timeout = ${?RABBITMQ_CONNECTION_TIMEOUT}
rabbitmq.ssl = ${?RABBITMQ_SSL}
rabbitmq.username = ${?RABBITMQ_USERNAME}
rabbitmq.password = ${?RABBITMQ_PASSWORD}
rabbitmq.requeue-on-nack = ${?RABBITMQ_REQUEUE_ON_NACK}
rabbitmq.requeue-on-reject = ${?RABBITMQ_REQUEUE_ON_REJECT}
rabbitmq.internal-queue-size = ${?RABBITMQ_INTERNAL_QUEUE_SIZE}
